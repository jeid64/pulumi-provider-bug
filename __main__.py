"""A Kubernetes Python Pulumi program"""



import pulumi
import pulumi_kubernetes
from pulumi_kubernetes.apps.v1 import Deployment
from pulumi_kubernetes.core.v1 import ServiceAccount

app_labels = {"app": "nginx"}


def extract_resource_name(kubernetes_resource):
    # https://github.com/pulumi/pulumi-kubernetes/issues/906 bug forces us to do this fun thing to get the name field.
    return pulumi.Output.all(
        kubernetes_resource.id, kubernetes_resource.metadata
    ).apply(lambda v: v[1]["name"])

def create_two_deployments():
    # here we make a service account to use for our two deployments
    service_account = ServiceAccount(
        "test-service-account", metadata={"labels": app_labels}
    )
    spec = {
        "selector": {"matchLabels": {"app": "calico-typha", "k8s-app": "calico-typha"}},
        "template": {
            "metadata": {
                "name": "calico-typha",
                "labels": {"app": "calico-typha", "k8s-app": "calico-typha"},
                "annotations": {
                    "cluster-autoscaler.kubernetes.io/safe-to-evict": "true"
                },
            },
            "spec": {
                "dnsPolicy": "ClusterFirst",
                "restartPolicy": "Always",
                "containers": [
                    {
                        "name": "calico-typha",
                        "image": "nginx",
                        "env": [
                            {"name": "FELIX_INTERFACEPREFIX", "value": "eni"},
                            {"name": "TYPHA_LOGFILEPATH", "value": "none"},
                            {"name": "TYPHA_LOGSEVERITYSYS", "value": "none"},
                            {"name": "TYPHA_LOGSEVERITYSCREEN", "value": "info"},
                            {"name": "TYPHA_PROMETHEUSMETRICSENABLED", "value": "true"},
                            {
                                "name": "TYPHA_CONNECTIONREBALANCINGMODE",
                                "value": "kubernetes",
                            },
                            {"name": "TYPHA_PROMETHEUSMETRICSPORT", "value": "9093"},
                            {"name": "TYPHA_DATASTORETYPE", "value": "kubernetes"},
                            {"name": "TYPHA_MAXCONNECTIONSLOWERLIMIT", "value": "1"},
                            {"name": "TYPHA_HEALTHENABLED", "value": "true"},
                            {
                                "name": "FELIX_IPTABLESMANGLEALLOWACTION",
                                "value": "Return",
                            },
                        ],
                        "ports": [
                            {
                                "name": "calico-typha",
                                "containerPort": 5473,
                                "hostPort": None,
                                "protocol": "TCP",
                            }
                        ],
                        "imagePullPolicy": "Always",
                        "securityContext": {
                            "runAsNonRoot": False,
                            "allowPrivilegeEscalation": False,
                            "privileged": False,
                        },
                        "livenessProbe": {
                            "initialDelaySeconds": 30,
                            "periodSeconds": 30,
                            "httpGet": {
                                "port": 80,
                                "scheme": "HTTP",
                                "path": "/status/200",
                                "host": "httpbin.org",
                            },
                        },
                        "readinessProbe": {
                            "periodSeconds": 10,
                            "httpGet": {
                                "port": 80,
                                "scheme": "HTTP",
                                "path": "/status/200",
                                "host": "httpbin.org",
                            },
                        },
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                    }
                ],
                # We call extract_resource_name in order to grab the autogenerated pulumi name from the service account.
                "serviceAccountName": extract_resource_name(service_account),
                "hostNetwork": True,
                "securityContext": {"fsGroup": 65534},
                "priorityClassName": "system-cluster-critical",
                "tolerations": [
                    {
                        "key": "CriticalAddonsOnly",
                        "value": None,
                        "operator": "Exists",
                        "effect": None,
                        "tolerationSeconds": None,
                    }
                ],
            },
        },
    }

    # so we're gonna make our initial deployment of typha, and that's gonna go fine
    deployment = Deployment("typha", spec=spec)

    # we want to extract the autogenerated name from the typha deployment
    typha_autogenerated_name = extract_resource_name(deployment)

    # and then we want to run an "apply" on that autogenerated name as an example.
    typha_final = typha_autogenerated_name.apply(lambda d: "ahhhhhh-{}".format(d))

    # this deployment now takes a million years waiting for ^ the apply to finish in pulumi up. Normally it takes 35 minutes for me on k8s 1.18, but if I disable the serversideapply featuregate on the cluster it takes 1 minute. 
    deployment2 = Deployment(
        "nginx2",
        spec={
            "selector": {"match_labels": {"a": typha_final}},
            "replicas": 1,
            "template": {
                "metadata": {"labels": {"a": typha_final}},
                "spec": {
                    "containers": [{"name": "nginx", "image": "nginx"}],
                    "serviceAccountName": extract_resource_name(service_account),
                },
            },
        },
    )


create_two_deployments()